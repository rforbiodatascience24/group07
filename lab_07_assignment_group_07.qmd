---
title: "Lab 7 Assignment: Group 07"
author: "Anne Sofie Jokumsen (s244028), Sophia Cash (s225099), Norbert Bálint (s204668), Madeline Shah (s241901), Bedri Duraksoy (s233415)"
format:
  html:
    embed-resources: true
execute:
  warning: false
editor: visual
---

## Background

The dataset was obtained from Kaggle under the ”Social Power NBA” dataset, under the name [NBA 16/17 Season Analysis](https://www.kaggle.com/code/ahmetburabua/nba-16-17-season-analysis) created by Noah Gift. It covers player names, team affiliations, salaries, positions, and various performance statistics (e.g., points, rebounds, assists). It was originally collected in order to examine the social influence of players, but can be used to uncover a wide variety of other correlations. The following attributes are used in the following analysis (abbreviations are derived from the dataset):

**AST:** Assists.

**STL:** Steals.

**BLK:** Blocks.

**ORB:** Offensive rebounds.

**DRB:** Defensive rebounds.

**TOV:** Turnovers.

**PF:** Personal fouls.

**POINTS.**

**POSITION.**

## Aim

The aim of this report is to perform a PCA on the NBA data noted above. We will aim to bypass the unfriendly output of the `prcomp()` function in R and create our own PCA using the `tidyverse` and `broom` packages. We will focus on only a few of the statistics and how `POSTION` is projected onto these attributes.

## Loading

The following loads the data set stored in *data/\_raw/* and packages used throughout this analysis. It assumes that the packages are already installed.

```{r}
#| output: false

library("tidyverse")
library("ggrepel")
library("broom") 
library("cowplot")

nba_data <- read_csv("~/projects/lab07_git_exercises/data/_raw/nba_2017_nba_players_with_salary.csv")
```

## Organizing the data

We only wish to look at a few of the statistics for our PCA, so we create a new tibble with only the above mentioned attributes. We also replace `NA` values with 0, as these are caused by division by 0 when the player has had 0 attempts.

```{r}
#| output: false

nba_clean <- nba_data |>
  as_tibble()

nba_selected <- nba_clean |>
  select("AST",
         "STL",
         "BLK",
         "ORB",
         "DRB",
         "TOV",
         "PF",
         "POINTS",
         "POSITION") |>
  mutate(across(where(is.numeric),
                ~ replace_na(., 0)))
```

## Analysis

We start the analysis by selecting the numeric data and performing a PCA while allowing for scaling.

```{r}
#| output: false

pca_fit <- nba_selected |>
  select(where(is.numeric)) |>
  prcomp(scale = TRUE)
```

We then calculate the rotation matrix and augment it into a tidy format.

```{r}
#| output: false

rotation_matrix <- pca_fit |>
  tidy(matrix = "rotation")
```

At last, we determine the variance explained by each principal component.

```{r}
#| output: false

variance_explained <- pca_fit |>
  tidy(matrix = "eigenvalues")
```

## Visualization

We plot our first two principal components and color code according to the player position.

```{r}
pca_fit |>
  augment(nba_selected) |>
  ggplot(aes(.fittedPC1,
             .fittedPC2,
             color = POSITION)) + 
  geom_point(size = 1.5,
             alpha = 0.75) +
  theme_minimal()
```

We plot the rotation matrix over the two first principal components as well.

```{r}
arrow_style <- arrow(angle = 20,
                     ends = "first",
                     type = "closed",
                     length = grid::unit(8, "pt"))

rotation_matrix |>
  pivot_wider(names_from = "PC",
              names_prefix = "PC",
              values_from = "value") |>
  ggplot(aes(PC1,
             PC2,
             color = column)) +
  geom_segment(xend = 0,
               yend = 0,
               arrow = arrow_style) +
  geom_text_repel(aes(label = column), 
                  nudge_x = -0.02,
                  max.overlaps = Inf) +
  xlim(-0.75, 0.25) +
  ylim(-0.6, 0.6) +
  coord_fixed() +
  theme_minimal() +
  theme(legend.position = "none")

```

Finally, we visualize the variance explained through a histogram.

```{r}
variance_explained |>
  ggplot(aes(PC, percent)) +
  geom_col(fill = "#56B4E9", alpha = 0.8) +
  scale_x_continuous(breaks = 1:9) +
  scale_y_continuous(
    labels = scales::percent_format(),
    expand = expansion(mult = c(0, 0.01))) +
  theme_minimal_hgrid(12)
```

## 
